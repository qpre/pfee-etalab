// Generated by CoffeeScript 1.6.3
(function() {
  var $, Leaftr, Tile;

  $ = jQuery;

  $.fn.extend({
    leaftr: function(options) {
      var plugin_div, settings, url;
      plugin_div = this;
      settings = {
        width: '600px',
        max_element: 10,
        related_width: '100px',
        img_width: '100px',
        max_title_length: 50,
        city_code: [],
        department_code: []
      };
      settings = $.extend(settings, options);
      url = 'http://cow.etalab2.fr/api/1/datasets/related';
      settings.city_code.forEach(function(city) {
        if (city !== 0) {
          return url += '?territory=CommuneOfFrance/' + city;
        }
      });
      settings.department_code.forEach(function(department) {
        if (department !== 0) {
          return url += '?territory=DepartmentOfFrance/' + department;
        }
      });
      return $.ajax(url, {
        type: 'GET',
        dataType: 'json',
        error: function(jqXHR, textStatus, errorThrown) {
          return console.log("AJAX Error: " + textStatus);
        },
        success: function(data, textStatus, jqXHR) {
          var leaftr;
          leaftr = new Leaftr(data, plugin_div, settings);
          return leaftr.display();
        }
      });
    }
  });

  /*
      TILE CLASS
  */


  Tile = (function() {
    Tile.prototype.clss = '';

    function Tile(data) {
      this.view_count = data.view_count;
      this.img = data.image_url;
      if (this.img === void 0) {
        this.img = 'assets/img/notFound.png';
      }
      this.url = data.url;
      this.name = data.title;
      if (this.name === void 0) {
        this.name = '';
      }
    }

    Tile.prototype.display = function(parent) {
      return parent.append("<a target='_blank' href='" + this.url + "'><div class='" + this.clss + "'><img src='" + this.img + "'><div class='leaftr-tile-hover'>" + this.name + "</div></div></a>");
    };

    return Tile;

  })();

  /*
      LEAFTR MAIN CLASS
  */


  Leaftr = (function() {
    Leaftr.prototype.tiles = null;

    Leaftr.prototype.max_view = 0;

    Leaftr.prototype.min_view = 0;

    function Leaftr(data, div, options) {
      this.data = data;
      this.div = div;
      this.options = options;
      this.loadTiles();
      this.div.css({
        'width': this.options.width
      });
    }

    Leaftr.prototype.loadTiles = function() {
      var self, value, _i, _len, _ref, _results;
      this.tiles = new Array();
      self = this;
      _ref = this.data.value;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        value = _ref[_i];
        _results.push((function(value) {
          var related, _j, _len1, _ref1, _results1;
          _ref1 = value.related;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            related = _ref1[_j];
            _results1.push((function(related) {
              return self.tiles.push(new Tile(related));
            })(related));
          }
          return _results1;
        })(value));
      }
      return _results;
    };

    Leaftr.prototype.setClasses = function() {
      var tile, _i, _len, _ref, _results;
      _ref = this.tiles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        if (this.max_view === 0) {
          tile.clss = 'item';
        } else {
          if (tile.view_count < (this.max_view / 2)) {
            tile.clss = 'item';
          }
          if (tile.view_count >= (this.max_view / 2)) {
            tile.clss = 'item w2';
          }
        }
        _results.push(console.log("class: " + tile.clss + " for view_count: " + tile.view_count));
      }
      return _results;
    };

    Leaftr.prototype.getViewMinMax = function() {
      var self, value, _i, _len, _ref, _results;
      self = this;
      _ref = this.data.value;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        value = _ref[_i];
        _results.push((function(value) {
          var related, _j, _len1, _ref1, _results1;
          _ref1 = value.related;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            related = _ref1[_j];
            _results1.push((function(related) {
              if (related.view_count > self.max_view) {
                self.max_view = related.view_count;
              }
              if (self.min_view === 0) {
                self.min_view = related.view_count;
              }
              if (related.view_count < self.min_view) {
                return self.min_view = related.view_count;
              }
            })(related));
          }
          return _results1;
        })(value));
      }
      return _results;
    };

    Leaftr.prototype.display = function() {
      var i, self, _i, _ref;
      this.getViewMinMax();
      this.setClasses();
      console.log(this.max_view);
      console.log(this.min_view);
      for (i = _i = 0, _ref = this.options.max_element; _i <= _ref; i = _i += 1) {
        this.tiles[i].display(this.div);
      }
      this.div.masonry({
        columnWidth: 50,
        itemSelector: '.item'
      });
      self = this;
      return this.div.imagesLoaded(function() {
        console.log('images loaded');
        return self.div.masonry({
          columnWidth: this.options.related_width,
          itemSelector: '.item',
          gutter: 5
        });
      });
    };

    /*
    display_div: (tile) ->
        img = tile.image_url
        img = 'assets/img/notFound.png' if img == undefined
        url = tile.url
        name = tile.title
        name = '' if name == undefined
    
        if name.length > @options.max_title_length
            name = name.substr(0, @options.max_title_length) + '...'
        @div.append("<a target='_blank' href='" + url + "'><div class='leaftr-tile'><img src='" + img + "'><div class='leaftr-tile-hover'>" + name + "</div></div></a>")
    */


    return Leaftr;

  })();

}).call(this);
